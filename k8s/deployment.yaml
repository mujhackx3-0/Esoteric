apiVersion: v1
kind: Namespace
metadata:
  name: esoteric
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: esoteric-config
  namespace: esoteric
data:
  APP_NAME: "Esoteric Loan Sales Assistant"
  APP_VERSION: "2.0.0"
  ENVIRONMENT: "production"
  DEBUG: "false"
  HOST: "0.0.0.0"
  PORT: "8000"
  GROQ_MODEL_NAME: "mixtral-8x7b-32768"
  GROQ_TEMPERATURE: "0.5"
  GROQ_MAX_TOKENS: "1024"
  SQLITE_DB_PATH: "chat_memory_loan_sales.db"
  CHROMA_DB_PERSIST_DIR: "loan_sales_rag.db"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_CALLS: "100"
  RATE_LIMIT_PERIOD: "60"
  MAX_MESSAGE_HISTORY: "50"
  EMBEDDING_MODEL: "all-MiniLM-L6-v2"
  RAG_TOP_K: "3"
  LOG_LEVEL: "INFO"
---
apiVersion: v1
kind: Secret
metadata:
  name: esoteric-secrets
  namespace: esoteric
type: Opaque
stringData:
  # GROQ_API_KEY is hardcoded in app/config.py - no need to set
  SECRET_KEY: "CHANGE_THIS_TO_STRONG_RANDOM_KEY"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: esoteric-backend-data
  namespace: esoteric
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: esoteric-rag-data
  namespace: esoteric
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: esoteric-backend
  namespace: esoteric
  labels:
    app: esoteric
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: esoteric
      component: backend
  template:
    metadata:
      labels:
        app: esoteric
        component: backend
    spec:
      containers:
      - name: backend
        image: your-registry/esoteric-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: esoteric-config
        - secretRef:
            name: esoteric-secrets
        volumeMounts:
        - name: backend-data
          mountPath: /app/data
        - name: rag-data
          mountPath: /app/loan_sales_rag.db
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: esoteric-backend-data
      - name: rag-data
        persistentVolumeClaim:
          claimName: esoteric-rag-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: esoteric-frontend
  namespace: esoteric
  labels:
    app: esoteric
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: esoteric
      component: frontend
  template:
    metadata:
      labels:
        app: esoteric
        component: frontend
    spec:
      containers:
      - name: frontend
        image: your-registry/esoteric-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.yourdomain.com"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://api.yourdomain.com"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: esoteric-backend
  namespace: esoteric
  labels:
    app: esoteric
    component: backend
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: esoteric
    component: backend
---
apiVersion: v1
kind: Service
metadata:
  name: esoteric-frontend
  namespace: esoteric
  labels:
    app: esoteric
    component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: esoteric
    component: frontend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: esoteric-ingress
  namespace: esoteric
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - yourdomain.com
    - api.yourdomain.com
    secretName: esoteric-tls
  rules:
  - host: yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: esoteric-frontend
            port:
              number: 3000
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: esoteric-backend
            port:
              number: 8000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: esoteric-backend-hpa
  namespace: esoteric
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: esoteric-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

